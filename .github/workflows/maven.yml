name: Java CI

on: [ push ]

jobs:
  build-java11:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 11 with JavaFX
        uses: actions/setup-java@v4
        with:
          java-version: 11
          distribution: 'temurin'
          java-package: 'jdk+fx' # Adicionado para incluir JavaFX
          cache: 'maven'

      - name: Load libagdb from cache (Java 11)
        id: libagdb_java11
        uses: actions/cache@v4
        with:
          path: libagdb
          key: libagdb-java11

      - name: Compile libagdb (Java 11)
        if: steps.libagdb_java11.outputs.cache-hit != 'true'
        run: |
          sudo apt update && sudo apt install -y git autoconf automake autopoint libtool pkg-config
          git clone https://github.com/libyal/libagdb.git && cd libagdb/ && git checkout 667a782
          sudo ./synclibs.sh && sudo ./autogen.sh && sudo ./configure

      - name: Install External Tools (Java 11)
        run: |
          sudo apt-get update && sudo apt-get install -y \
          libscca-utils rifiuti2 libevtx-utils libevt-utils \
          libmsiecf-utils=20181227-2build1 \
          pff-tools=20180714-3build1 \
          libesedb-utils=20181229-3.1build2 \
          tesseract-ocr \
          tesseract-ocr-por \
          imagemagick \
          python3-pip
          sudo perl -MCPAN -e 'install Parse::Win32Registry'
          pip install jep==4.0.3

          cd libagdb/ && sudo make install
          sudo ldconfig /usr/local/lib
          cd ..
          sudo apt-get install -y gsfonts

      - name: Cache test images (Java 11)
        uses: actions/cache@v4
        with:
          path: |
            target/test-images
          key: ${{ runner.os }}-test-images-${{ hashFiles('iped-tests/src/test/java/br/com/iped/tests/ImageProcessingTest.java') }}

      - name: Build IPED and prepare CLI for tests (Java 11)
        run: |
          # Use 'mvn clean install -DskipTests' para construir o projeto e pular os testes nesta fase.
          mvn -B clean install -DskipTests
          mkdir -p target/release/iped-4.2.0
          # Copie os artefatos de release. Verifique o caminho exato onde o seu projeto gera os artefatos.
          cp -r iped-parent/target/release/iped-4.2.0/* target/release/iped-4.2.0/ || true

      - name: Run Regression Tests (Java 11)
        run: mvn -B test --projects iped-tests

      - name: Create and upload snapshot archive (Java 11)
        shell: bash
        run: |
          # Garante que o diretório 'target/release' exista antes de tentar movê-lo.
          mkdir -p target/release
          mv target/release target/iped-snapshot-${{ github.sha }}
          tar -zcvf iped-snapshot.tar.gz target/iped-snapshot-${{ github.sha }}

      - name: Upload snapshot (Java 11)
        uses: actions/upload-artifact@v4
        with:
          name: iped-snapshot-${{ github.sha }}
          path: iped-snapshot.tar.gz

  build-java14:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 14 with JavaFX
        uses: actions/setup-java@v4
        with:
          java-version: 14
          distribution: 'liberica' # Usando Liberica que oferece 'jdk+fx'
          java-package: 'jdk+fx'  # Adicionado para incluir JavaFX
          cache: 'maven'
          # Removido 'jdkFile' pois 'distribution' será usado para baixar o JDK com FX.
          # Também removido o passo 'Download JDK 14' manual.

      - name: Load libagdb from cache (Java 14)
        id: libagdb_java14
        uses: actions/cache@v4
        with:
          path: libagdb
          key: libagdb-java14 # ID único para este job

      - name: Compile libagdb (Java 14)
        if: steps.libagdb_java14.outputs.cache-hit != 'true'
        run: |
          sudo apt update && sudo apt install -y git autoconf automake autopoint libtool pkg-config
          git clone https://github.com/libyal/libagdb.git && cd libagdb/ && git checkout 667a782
          sudo ./synclibs.sh && sudo ./autogen.sh && sudo ./configure

      - name: Install External Tools (Java 14)
        run: |
          # Adicione -y para aceitar automaticamente as perguntas do PPA.
          sudo add-apt-repository ppa:alex-p/tesseract-ocr-devel -y
          sudo apt-get update && sudo apt-get install -y \
          libscca-utils rifiuti2 libevtx-utils libevt-utils \
          libmsiecf-utils=20181227-2build1 \
          pff-tools=20180714-3build1 \
          libesedb-utils=20181229-3.1build2 \
          tesseract-ocr \
          tesseract-ocr-por \
          imagemagick \
          python3-pip
          sudo perl -MCPAN -e 'install Parse::Win32Registry'
          pip install jep==4.0.3

          cd libagdb/ && sudo make install
          sudo ldconfig /usr/local/lib
          cd ..
          sudo apt-get install -y gsfonts

      - name: Cache test images (Java 14)
        uses: actions/cache@v4
        with:
          path: |
            target/test-images
          key: ${{ runner.os }}-test-images-${{ hashFiles('iped-tests/src/test/java/br/com/iped/tests/ImageProcessingTest.java') }}

      - name: Build IPED and prepare CLI for tests (Java 14)
        run: |
          mvn -B clean install
          mkdir -p target/release/iped-4.2.0
          cp -r iped-parent/target/release/iped-4.2.0/* target/release/iped-4.2.0/ || true

      - name: Run Regression Tests (Java 14)
        run: mvn -B test --projects iped-tests